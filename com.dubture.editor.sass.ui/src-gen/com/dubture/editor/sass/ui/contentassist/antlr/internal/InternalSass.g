/*
* generated by Xtext
*/
grammar InternalSass;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.dubture.editor.sass.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.dubture.editor.sass.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.dubture.editor.sass.services.SassGrammarAccess;

}

@parser::members {
 
 	private SassGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SassGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleSass
entryRuleSass 
:
{ before(grammarAccess.getSassRule()); }
	 ruleSass
{ after(grammarAccess.getSassRule()); } 
	 EOF 
;

// Rule Sass
ruleSass
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSassAccess().getGroup()); }
(rule__Sass__Group__0)
{ after(grammarAccess.getSassAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCharset
entryRuleCharset 
:
{ before(grammarAccess.getCharsetRule()); }
	 ruleCharset
{ after(grammarAccess.getCharsetRule()); } 
	 EOF 
;

// Rule Charset
ruleCharset
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCharsetAccess().getGroup()); }
(rule__Charset__Group__0)
{ after(grammarAccess.getCharsetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRule
entryRuleRule 
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleAccess().getGroup()); }
(rule__Rule__Group__0)
{ after(grammarAccess.getRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRuleHead
entryRuleRuleHead 
:
{ before(grammarAccess.getRuleHeadRule()); }
	 ruleRuleHead
{ after(grammarAccess.getRuleHeadRule()); } 
	 EOF 
;

// Rule RuleHead
ruleRuleHead
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleHeadAccess().getGroup()); }
(rule__RuleHead__Group__0)
{ after(grammarAccess.getRuleHeadAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRuleBody
entryRuleRuleBody 
:
{ before(grammarAccess.getRuleBodyRule()); }
	 ruleRuleBody
{ after(grammarAccess.getRuleBodyRule()); } 
	 EOF 
;

// Rule RuleBody
ruleRuleBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleBodyAccess().getAlternatives()); }
(rule__RuleBody__Alternatives)*
{ after(grammarAccess.getRuleBodyAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyDeclaration
entryRulePropertyDeclaration 
:
{ before(grammarAccess.getPropertyDeclarationRule()); }
	 rulePropertyDeclaration
{ after(grammarAccess.getPropertyDeclarationRule()); } 
	 EOF 
;

// Rule PropertyDeclaration
rulePropertyDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getGroup()); }
(rule__PropertyDeclaration__Group__0)
{ after(grammarAccess.getPropertyDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__RuleBody__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleBodyAccess().getPropertyDeclarationParserRuleCall_0()); }
	rulePropertyDeclaration
{ after(grammarAccess.getRuleBodyAccess().getPropertyDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getRuleBodyAccess().getRuleParserRuleCall_1()); }
	ruleRule
{ after(grammarAccess.getRuleBodyAccess().getRuleParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getGroup_2_0()); }
(rule__PropertyDeclaration__Group_2_0__0)
{ after(grammarAccess.getPropertyDeclarationAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getPropertyDeclarationAccess().getGroup_2_1()); }
(rule__PropertyDeclaration__Group_2_1__0)
{ after(grammarAccess.getPropertyDeclarationAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__Alternatives_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getWORDTerminalRuleCall_2_0_0_0()); }
	RULE_WORD
{ after(grammarAccess.getPropertyDeclarationAccess().getWORDTerminalRuleCall_2_0_0_0()); }
)

    |(
{ before(grammarAccess.getPropertyDeclarationAccess().getVARIABLETerminalRuleCall_2_0_0_1()); }
	RULE_VARIABLE
{ after(grammarAccess.getPropertyDeclarationAccess().getVARIABLETerminalRuleCall_2_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Sass__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sass__Group__0__Impl
	rule__Sass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sass__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSassAccess().getSassAction_0()); }
(

)
{ after(grammarAccess.getSassAccess().getSassAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sass__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sass__Group__1__Impl
	rule__Sass__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sass__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSassAccess().getCharsetParserRuleCall_1()); }
(	ruleCharset)?
{ after(grammarAccess.getSassAccess().getCharsetParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sass__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sass__Group__2__Impl
	rule__Sass__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sass__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSassAccess().getVariableDeclarationParserRuleCall_2()); }
(	ruleVariableDeclaration)*
{ after(grammarAccess.getSassAccess().getVariableDeclarationParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sass__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sass__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sass__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSassAccess().getStatementsAssignment_3()); }
(rule__Sass__StatementsAssignment_3)*
{ after(grammarAccess.getSassAccess().getStatementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Charset__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Charset__Group__0__Impl
	rule__Charset__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Charset__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharsetAccess().getCHARSET_IDTerminalRuleCall_0()); }
	RULE_CHARSET_ID
{ after(grammarAccess.getCharsetAccess().getCHARSET_IDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Charset__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Charset__Group__1__Impl
	rule__Charset__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Charset__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharsetAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getCharsetAccess().getSTRINGTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Charset__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Charset__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Charset__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharsetAccess().getSCTerminalRuleCall_2()); }
	RULE_SC
{ after(grammarAccess.getCharsetAccess().getSCTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getVARIABLETerminalRuleCall_0()); }
	RULE_VARIABLE
{ after(grammarAccess.getVariableDeclarationAccess().getVARIABLETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getCLTerminalRuleCall_1()); }
	RULE_CL
{ after(grammarAccess.getVariableDeclarationAccess().getCLTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getWORDTerminalRuleCall_2()); }
	RULE_WORD
{ after(grammarAccess.getVariableDeclarationAccess().getWORDTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getSCTerminalRuleCall_3()); }
	RULE_SC
{ after(grammarAccess.getVariableDeclarationAccess().getSCTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Rule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getRuleHeadParserRuleCall_0()); }
	ruleRuleHead
{ after(grammarAccess.getRuleAccess().getRuleHeadParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getBLTerminalRuleCall_1()); }
	RULE_BL
{ after(grammarAccess.getRuleAccess().getBLTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getRuleBodyParserRuleCall_2()); }
	ruleRuleBody
{ after(grammarAccess.getRuleAccess().getRuleBodyParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getBRTerminalRuleCall_3()); }
	RULE_BR
{ after(grammarAccess.getRuleAccess().getBRTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RuleHead__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleHead__Group__0__Impl
	rule__RuleHead__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleHead__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleHeadAccess().getSELECTORTerminalRuleCall_0()); }
	RULE_SELECTOR
{ after(grammarAccess.getRuleHeadAccess().getSELECTORTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleHead__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleHead__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleHead__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleHeadAccess().getGroup_1()); }
(rule__RuleHead__Group_1__0)*
{ after(grammarAccess.getRuleHeadAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RuleHead__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleHead__Group_1__0__Impl
	rule__RuleHead__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleHead__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleHeadAccess().getCOMMATerminalRuleCall_1_0()); }
	RULE_COMMA
{ after(grammarAccess.getRuleHeadAccess().getCOMMATerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleHead__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleHead__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleHead__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleHeadAccess().getSELECTORTerminalRuleCall_1_1()); }
	RULE_SELECTOR
{ after(grammarAccess.getRuleHeadAccess().getSELECTORTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDeclaration__Group__0__Impl
	rule__PropertyDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getWORDTerminalRuleCall_0()); }
	RULE_WORD
{ after(grammarAccess.getPropertyDeclarationAccess().getWORDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDeclaration__Group__1__Impl
	rule__PropertyDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getCLTerminalRuleCall_1()); }
	RULE_CL
{ after(grammarAccess.getPropertyDeclarationAccess().getCLTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getAlternatives_2()); }
(rule__PropertyDeclaration__Alternatives_2)
{ after(grammarAccess.getPropertyDeclarationAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PropertyDeclaration__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDeclaration__Group_2_0__0__Impl
	rule__PropertyDeclaration__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getPropertyDeclarationAccess().getAlternatives_2_0_0()); }
(rule__PropertyDeclaration__Alternatives_2_0_0)
{ after(grammarAccess.getPropertyDeclarationAccess().getAlternatives_2_0_0()); }
)
(
{ before(grammarAccess.getPropertyDeclarationAccess().getAlternatives_2_0_0()); }
(rule__PropertyDeclaration__Alternatives_2_0_0)*
{ after(grammarAccess.getPropertyDeclarationAccess().getAlternatives_2_0_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyDeclaration__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDeclaration__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getSCTerminalRuleCall_2_0_1()); }
	RULE_SC
{ after(grammarAccess.getPropertyDeclarationAccess().getSCTerminalRuleCall_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyDeclaration__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDeclaration__Group_2_1__0__Impl
	rule__PropertyDeclaration__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getBLTerminalRuleCall_2_1_0()); }
	RULE_BL
{ after(grammarAccess.getPropertyDeclarationAccess().getBLTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyDeclaration__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDeclaration__Group_2_1__1__Impl
	rule__PropertyDeclaration__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getPropertyDeclarationParserRuleCall_2_1_1()); }
(	rulePropertyDeclaration)*
{ after(grammarAccess.getPropertyDeclarationAccess().getPropertyDeclarationParserRuleCall_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyDeclaration__Group_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyDeclaration__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyDeclaration__Group_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyDeclarationAccess().getBRTerminalRuleCall_2_1_2()); }
	RULE_BR
{ after(grammarAccess.getPropertyDeclarationAccess().getBRTerminalRuleCall_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Sass__StatementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSassAccess().getStatementsRuleParserRuleCall_3_0()); }
	ruleRule{ after(grammarAccess.getSassAccess().getStatementsRuleParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_DOT : '.';

RULE_COMMA : ',';

RULE_SHARP : '#';

RULE_CL : ':';

RULE_SC : ';';

RULE_BL : '{';

RULE_BR : '}';

RULE_DOLLAR : '$';

RULE_AMP : '&';

RULE_CHARSET_ID : '@charset ';

RULE_WORD : ('a'..'z'|'A'..'Z'|'0'..'9'|'-'|'%')+;

RULE_VARIABLE : RULE_DOLLAR RULE_WORD;

RULE_SELECTOR : (RULE_AMP RULE_CL RULE_WORD|((RULE_SHARP|RULE_DOT)? RULE_WORD)+);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


