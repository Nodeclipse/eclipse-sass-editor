/*
* generated by Xtext
*/
package com.dubture.editor.sass.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.dubture.editor.sass.services.SassGrammarAccess;

public class SassParser extends AbstractContentAssistParser {
	
	@Inject
	private SassGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.dubture.editor.sass.ui.contentassist.antlr.internal.InternalSassParser createParser() {
		com.dubture.editor.sass.ui.contentassist.antlr.internal.InternalSassParser result = new com.dubture.editor.sass.ui.contentassist.antlr.internal.InternalSassParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRuleBodyAccess().getAlternatives(), "rule__RuleBody__Alternatives");
					put(grammarAccess.getPropertyDeclarationAccess().getAlternatives_2(), "rule__PropertyDeclaration__Alternatives_2");
					put(grammarAccess.getPropertyDeclarationAccess().getAlternatives_2_0_0(), "rule__PropertyDeclaration__Alternatives_2_0_0");
					put(grammarAccess.getSassAccess().getGroup(), "rule__Sass__Group__0");
					put(grammarAccess.getCharsetAccess().getGroup(), "rule__Charset__Group__0");
					put(grammarAccess.getIncludeAccess().getGroup(), "rule__Include__Group__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getRuleHeadAccess().getGroup(), "rule__RuleHead__Group__0");
					put(grammarAccess.getRuleHeadAccess().getGroup_1(), "rule__RuleHead__Group_1__0");
					put(grammarAccess.getPropertyDeclarationAccess().getGroup(), "rule__PropertyDeclaration__Group__0");
					put(grammarAccess.getPropertyDeclarationAccess().getGroup_2_0(), "rule__PropertyDeclaration__Group_2_0__0");
					put(grammarAccess.getPropertyDeclarationAccess().getGroup_2_1(), "rule__PropertyDeclaration__Group_2_1__0");
					put(grammarAccess.getSassAccess().getStatementsAssignment_3(), "rule__Sass__StatementsAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.dubture.editor.sass.ui.contentassist.antlr.internal.InternalSassParser typedParser = (com.dubture.editor.sass.ui.contentassist.antlr.internal.InternalSassParser) parser;
			typedParser.entryRuleSass();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SassGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SassGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
